{"ast":null,"code":"const baseUrl = process.env.REACT_APP_ENDERECO_API;\n\n// Função para tratamento de resposta\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json();\n    throw new Error(error.message || \"Erro ao processar a solicitação\");\n  }\n  try {\n    return await response.json();\n  } catch (error) {\n    return null; // Em casos onde a resposta é um DELETE ou não contém um JSON\n  }\n};\n\n// Função para buscar todos os funcionários\nexport const getFuncionarioAPI = async () => {\n  try {\n    const response = await fetch(`${baseUrl}/funcionarios`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Erro ao buscar funcionários:\", error);\n    return [];\n  }\n};\n\n// Função para buscar um funcionário por ID\nexport const getFuncionarioPorCodigoAPI = async id => {\n  try {\n    const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Erro ao buscar funcionário com ID ${id}:`, error);\n    return null;\n  }\n};\n\n// Função para deletar um funcionário por ID\nexport const deleteFuncionarioPorCodigoAPI = async id => {\n  try {\n    const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.status === 204) {\n      return {\n        message: \"Funcionário removido com sucesso\"\n      };\n    }\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Erro ao deletar funcionário com ID ${id}:`, error);\n    return null;\n  }\n};\n\n// Função para cadastrar ou atualizar um funcionário\nexport const cadastraFuncionarioAPI = async (objeto, metodo) => {\n  try {\n    const response = await fetch(`${baseUrl}/funcionarios`, {\n      method: metodo,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(objeto)\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Erro ao cadastrar/atualizar funcionário:\", error);\n    return null;\n  }\n};","map":{"version":3,"names":["baseUrl","process","env","REACT_APP_ENDERECO_API","handleResponse","response","ok","error","json","Error","message","getFuncionarioAPI","fetch","method","headers","console","getFuncionarioPorCodigoAPI","id","deleteFuncionarioPorCodigoAPI","status","cadastraFuncionarioAPI","objeto","metodo","body","JSON","stringify"],"sources":["C:/Users/aliss/OneDrive/Área de Trabalho/Projeto_PW/Gestao_Front/src/servicos/FuncionarioServico.jsx"],"sourcesContent":["const baseUrl = process.env.REACT_APP_ENDERECO_API;\r\n\r\n// Função para tratamento de resposta\r\nconst handleResponse = async (response) => {\r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || \"Erro ao processar a solicitação\");\r\n    }\r\n    try {\r\n        return await response.json();\r\n    } catch (error) {\r\n        return null; // Em casos onde a resposta é um DELETE ou não contém um JSON\r\n    }\r\n};\r\n\r\n// Função para buscar todos os funcionários\r\nexport const getFuncionarioAPI = async () => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/funcionarios`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(\"Erro ao buscar funcionários:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Função para buscar um funcionário por ID\r\nexport const getFuncionarioPorCodigoAPI = async (id) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(`Erro ao buscar funcionário com ID ${id}:`, error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Função para deletar um funcionário por ID\r\nexport const deleteFuncionarioPorCodigoAPI = async (id) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        if (response.status === 204) {\r\n            return { message: \"Funcionário removido com sucesso\" };\r\n        }\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(`Erro ao deletar funcionário com ID ${id}:`, error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Função para cadastrar ou atualizar um funcionário\r\nexport const cadastraFuncionarioAPI = async (objeto, metodo) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/funcionarios`, {\r\n            method: metodo,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(objeto)\r\n        });\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(\"Erro ao cadastrar/atualizar funcionário:\", error);\r\n        return null;\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;;AAElD;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACvC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IACd,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACnC,MAAM,IAAIC,KAAK,CAACF,KAAK,CAACG,OAAO,IAAI,iCAAiC,CAAC;EACvE;EACA,IAAI;IACA,OAAO,MAAML,QAAQ,CAACG,IAAI,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOD,KAAK,EAAE;IACZ,OAAO,IAAI,CAAC,CAAC;EACjB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGZ,OAAO,eAAe,EAAE;MACpDa,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,OAAO,MAAMV,cAAc,CAACC,QAAQ,CAAC;EACzC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZQ,OAAO,CAACR,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACb;AACJ,CAAC;;AAED;AACA,OAAO,MAAMS,0BAA0B,GAAG,MAAOC,EAAE,IAAK;EACpD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGZ,OAAO,iBAAiBiB,EAAE,EAAE,EAAE;MAC1DJ,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,OAAO,MAAMV,cAAc,CAACC,QAAQ,CAAC;EACzC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZQ,OAAO,CAACR,KAAK,CAAC,qCAAqCU,EAAE,GAAG,EAAEV,KAAK,CAAC;IAChE,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMW,6BAA6B,GAAG,MAAOD,EAAE,IAAK;EACvD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGZ,OAAO,iBAAiBiB,EAAE,EAAE,EAAE;MAC1DJ,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,IAAIT,QAAQ,CAACc,MAAM,KAAK,GAAG,EAAE;MACzB,OAAO;QAAET,OAAO,EAAE;MAAmC,CAAC;IAC1D;IACA,OAAO,MAAMN,cAAc,CAACC,QAAQ,CAAC;EACzC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZQ,OAAO,CAACR,KAAK,CAAC,sCAAsCU,EAAE,GAAG,EAAEV,KAAK,CAAC;IACjE,OAAO,IAAI;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAMa,sBAAsB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,MAAM,KAAK;EAC5D,IAAI;IACA,MAAMjB,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGZ,OAAO,eAAe,EAAE;MACpDa,MAAM,EAAES,MAAM;MACdR,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDS,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM;IAC/B,CAAC,CAAC;IACF,OAAO,MAAMjB,cAAc,CAACC,QAAQ,CAAC;EACzC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZQ,OAAO,CAACR,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IAChE,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}