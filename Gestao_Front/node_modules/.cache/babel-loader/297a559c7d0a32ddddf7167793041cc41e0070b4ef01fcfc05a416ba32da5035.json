{"ast":null,"code":"const baseUrl = process.env.REACT_APP_ENDERECO_API;\n\n/*\r\nconst handleResponse = async (response) => {\r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || \"Erro ao processar a solicitação\");\r\n    }\r\n    try {\r\n        return await response.json();\r\n    } catch (error) {\r\n        return null; // Em casos onde a resposta é um DELETE ou não contém um JSON\r\n    }\r\n};*/\n\n// Função para buscar todos os funcionários\nexport const getFuncionarioAPI = async () => {\n  try {\n    const response = await fetch(`${baseUrl}/funcionarios`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(\"Erro ao buscar funcionários:\", error);\n    return [];\n  }\n};\n\n// Função para buscar um funcionário por ID\nexport const getFuncionarioPorCodigoAPI = async id => {\n  try {\n    const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Erro ao buscar funcionário com ID ${id}:`, error);\n    return null;\n  }\n};\n\n// Função para deletar um funcionário por ID\nexport const deleteFuncionarioPorCodigoAPI = async id => {\n  try {\n    const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.status === 204) {\n      return {\n        message: \"Funcionário removido com sucesso\"\n      };\n    }\n    return await handleResponse(response);\n  } catch (error) {\n    console.error(`Erro ao deletar funcionário com ID ${id}:`, error);\n    return null;\n  }\n};\n\n// Função para cadastrar ou atualizar um funcionário \nexport const cadastraFuncionarioAPI = async (objeto, metodo) => {\n  try {\n    // Verifique se o objeto contém os dados necessários\n    if (!objeto.nome || !objeto.salario) {\n      console.error(\"Dados inválidos para cadastro/atualização do funcionário\");\n      return {\n        success: false,\n        message: \"Dados inválidos\"\n      };\n    }\n    const response = await fetch(`${baseUrl}/funcionarios`, {\n      method: metodo,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(objeto)\n    });\n    const result = await handleResponse(response);\n    if (!result.success) {\n      console.error(result.message);\n      return result; // Retorna o erro recebido do servidor\n    }\n    return result.data;\n  } catch (error) {\n    console.error(\"Erro ao cadastrar/atualizar funcionário:\", error);\n    return {\n      success: false,\n      message: \"Erro ao cadastrar/atualizar funcionário\"\n    };\n  }\n};\n\n// Função de tratamento da resposta\nconst handleResponse = response => {\n  if (!response.ok) {\n    return {\n      success: false,\n      message: `Erro na requisição: ${response.statusText}`\n    };\n  }\n  return {\n    success: true,\n    data: response.json()\n  }; // Parse o corpo da resposta JSON\n};","map":{"version":3,"names":["baseUrl","process","env","REACT_APP_ENDERECO_API","getFuncionarioAPI","response","fetch","method","headers","handleResponse","error","console","getFuncionarioPorCodigoAPI","id","deleteFuncionarioPorCodigoAPI","status","message","cadastraFuncionarioAPI","objeto","metodo","nome","salario","success","body","JSON","stringify","result","data","ok","statusText","json"],"sources":["C:/Users/aliss/OneDrive/Área de Trabalho/Projeto_PW/Gestao_Front/src/servicos/FuncionarioServico.jsx"],"sourcesContent":["const baseUrl = process.env.REACT_APP_ENDERECO_API;\r\n\r\n/*\r\nconst handleResponse = async (response) => {\r\n    if (!response.ok) {\r\n        const error = await response.json();\r\n        throw new Error(error.message || \"Erro ao processar a solicitação\");\r\n    }\r\n    try {\r\n        return await response.json();\r\n    } catch (error) {\r\n        return null; // Em casos onde a resposta é um DELETE ou não contém um JSON\r\n    }\r\n};*/\r\n\r\n// Função para buscar todos os funcionários\r\nexport const getFuncionarioAPI = async () => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/funcionarios`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(\"Erro ao buscar funcionários:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\n// Função para buscar um funcionário por ID\r\nexport const getFuncionarioPorCodigoAPI = async (id) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(`Erro ao buscar funcionário com ID ${id}:`, error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Função para deletar um funcionário por ID\r\nexport const deleteFuncionarioPorCodigoAPI = async (id) => {\r\n    try {\r\n        const response = await fetch(`${baseUrl}/funcionarios/${id}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        });\r\n        if (response.status === 204) {\r\n            return { message: \"Funcionário removido com sucesso\" };\r\n        }\r\n        return await handleResponse(response);\r\n    } catch (error) {\r\n        console.error(`Erro ao deletar funcionário com ID ${id}:`, error);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Função para cadastrar ou atualizar um funcionário \r\nexport const cadastraFuncionarioAPI = async (objeto, metodo) => {\r\n    try {\r\n        // Verifique se o objeto contém os dados necessários\r\n        if (!objeto.nome || !objeto.salario) {\r\n            console.error(\"Dados inválidos para cadastro/atualização do funcionário\");\r\n            return { success: false, message: \"Dados inválidos\" };\r\n        }\r\n\r\n        const response = await fetch(`${baseUrl}/funcionarios`, {\r\n            method: metodo,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(objeto)\r\n        });\r\n\r\n        const result = await handleResponse(response);\r\n\r\n        if (!result.success) {\r\n            console.error(result.message);\r\n            return result; // Retorna o erro recebido do servidor\r\n        }\r\n\r\n        return result.data;\r\n    } catch (error) {\r\n        console.error(\"Erro ao cadastrar/atualizar funcionário:\", error);\r\n        return { success: false, message: \"Erro ao cadastrar/atualizar funcionário\" };\r\n    }\r\n};\r\n\r\n// Função de tratamento da resposta\r\nconst handleResponse = (response) => {\r\n    if (!response.ok) {\r\n        return { success: false, message: `Erro na requisição: ${response.statusText}` };\r\n    }\r\n    return { success: true, data: response.json() }; // Parse o corpo da resposta JSON\r\n};\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}